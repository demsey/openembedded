diff -Naur u-boot-1.3.1.org/fs/ext2/dev.c u-boot-1.3.1/fs/ext2/dev.c
--- u-boot-1.3.1.org/fs/ext2/dev.c	2007-12-06 10:21:19.000000000 +0100
+++ u-boot-1.3.1/fs/ext2/dev.c	2010-05-03 00:41:54.582891774 +0200
@@ -96,8 +96,23 @@
 		sector++;
 	}
 
+	if (byte_len == 0)
+		return 1;
+
 	/*  read sector aligned part */
 	block_len = byte_len & ~(SECTOR_SIZE - 1);
+
+	if (block_len == 0) {
+		u8 p[SECTOR_SIZE];
+
+		block_len = SECTOR_SIZE;
+		ext2fs_block_dev_desc->block_read(ext2fs_block_dev_desc->dev,
+						  part_info.start + sector,
+						  1, (unsigned long *)p);
+		memcpy(buf, p, byte_len);
+		return 1;
+	}
+
 	if (ext2fs_block_dev_desc->block_read (ext2fs_block_dev_desc->dev,
 					       part_info.start + sector,
 					       block_len / SECTOR_SIZE,
@@ -106,6 +121,7 @@
 		printf (" ** ext2fs_devread() read error - block\n");
 		return (0);
 	}
+	block_len = byte_len & ~(SECTOR_SIZE - 1);
 	buf += block_len;
 	byte_len -= block_len;
 	sector += block_len / SECTOR_SIZE;
diff -Naur u-boot-1.3.1.org/fs/ext2/ext2fs.c u-boot-1.3.1/fs/ext2/ext2fs.c
--- u-boot-1.3.1.org/fs/ext2/ext2fs.c	2007-12-06 10:21:19.000000000 +0100
+++ u-boot-1.3.1/fs/ext2/ext2fs.c	2010-05-03 00:39:24.126658704 +0200
@@ -112,7 +112,7 @@
 	uint32_t inode_table_id;
 	uint16_t free_blocks;
 	uint16_t free_inodes;
-	uint16_t pad;
+	uint16_t used_dir_cnt;
 	uint32_t reserved[3];
 };
 
@@ -180,18 +180,27 @@
 uint32_t *indir2_block = NULL;
 int indir2_size = 0;
 int indir2_blkno = -1;
+static unsigned int inode_size;
 
 
 static int ext2fs_blockgroup
 	(struct ext2_data *data, int group, struct ext2_block_group *blkgrp) {
+	unsigned int blkno;
+	unsigned int blkoff;
+	unsigned int desc_per_blk;
+
+	desc_per_blk = EXT2_BLOCK_SIZE(data) / sizeof(struct ext2_block_group);
+
+	blkno = __le32_to_cpu(data->sblock.first_data_block) + 1 +
+	group / desc_per_blk;
+	blkoff = (group % desc_per_blk) * sizeof(struct ext2_block_group);
 #ifdef DEBUG
-	printf ("ext2fs read blockgroup\n");
+	printf ("ext2fs read %d group descriptor (blkno %d blkoff %d)\n",
+		group, blkno, blkoff);
+	
 #endif
-	return (ext2fs_devread
-		(((__le32_to_cpu (data->sblock.first_data_block) +
-		   1) << LOG2_EXT2_BLOCK_SIZE (data)),
-		 group * sizeof (struct ext2_block_group),
-		 sizeof (struct ext2_block_group), (char *) blkgrp));
+	return (ext2fs_devread (blkno << LOG2_EXT2_BLOCK_SIZE(data),
+		blkoff, sizeof(struct ext2_block_group), (char *)blkgrp));
 }
 
 
@@ -205,11 +214,11 @@
 	unsigned int blkno;
 	unsigned int blkoff;
 
-	/* It is easier to calculate if the first inode is 0.  */
-	ino--;
 #ifdef DEBUG
-	printf ("ext2fs read inode %d\n", ino);
+	printf ("ext2fs read inode %d, inode_size %d\n", ino, inode_size);
 #endif
+	/* It is easier to calculate if the first inode is 0.  */
+	ino--;
 	status = ext2fs_blockgroup (data,
 				    ino /
 				    __le32_to_cpu (sblock->inodes_per_group),
@@ -217,18 +226,17 @@
 	if (status == 0) {
 		return (0);
 	}
-	inodes_per_block = EXT2_BLOCK_SIZE (data) / 128;
-	blkno = (ino % __le32_to_cpu (sblock->inodes_per_group)) /
-		inodes_per_block;
-	blkoff = (ino % __le32_to_cpu (sblock->inodes_per_group)) %
-		inodes_per_block;
+	inodes_per_block = EXT2_BLOCK_SIZE (data) / inode_size;
+
+	blkno = __le32_to_cpu (blkgrp.inode_table_id) +
+		(ino % __le32_to_cpu (sblock->inodes_per_group))
+		/ inodes_per_block;
+	blkoff = (ino % inodes_per_block) * inode_size;
 #ifdef DEBUG
 	printf ("ext2fs read inode blkno %d blkoff %d\n", blkno, blkoff);
 #endif
 	/* Read the inode.  */
-	status = ext2fs_devread (((__le32_to_cpu (blkgrp.inode_table_id) +
-				   blkno) << LOG2_EXT2_BLOCK_SIZE (data)),
-				 sizeof (struct ext2_inode) * blkoff,
+	status = ext2fs_devread (blkno << LOG2_EXT2_BLOCK_SIZE (data), blkoff,
 				 sizeof (struct ext2_inode), (char *) inode);
 	if (status == 0) {
 		return (0);
@@ -436,7 +444,7 @@
 				return (-1);
 			}
 		} else {
-			memset (buf, blocksize - skipfirst, 0);
+			memset (buf, 0, blocksize - skipfirst);
 		}
 		buf += blocksize - skipfirst;
 	}
@@ -854,6 +862,15 @@
 	if (__le16_to_cpu (data->sblock.magic) != EXT2_MAGIC) {
 		goto fail;
 	}
+	if (__le32_to_cpu(data->sblock.revision_level == 0)) {
+		inode_size = 128;
+	} else {
+		inode_size = __le16_to_cpu(data->sblock.inode_size);
+	}
+#ifdef DEBUG
+	printf("EXT2 rev %d, inode_size %d\n",
+			__le32_to_cpu(data->sblock.revision_level), inode_size);
+#endif
 	data->diropen.data = data;
 	data->diropen.ino = 2;
 	data->diropen.inode_read = 1;
diff -Naur u-boot-1.3.1.org/fs/fat/fat.c u-boot-1.3.1/fs/fat/fat.c
--- u-boot-1.3.1.org/fs/fat/fat.c	2007-12-06 10:21:19.000000000 +0100
+++ u-boot-1.3.1/fs/fat/fat.c	2010-05-03 00:27:53.390891924 +0200
@@ -147,27 +147,6 @@
 
 
 /*
- * Match volume_info fs_type strings.
- * Return 0 on match, -1 otherwise.
- */
-static int
-compare_sign(char *str1, char *str2)
-{
-	char *end = str1+SIGNLEN;
-
-	while (str1 != end) {
-		if (*str1 != *str2) {
-			return -1;
-		}
-		str1++;
-		str2++;
-	}
-
-	return 0;
-}
-
-
-/*
  * Extract zero terminated short name from a directory entry.
  */
 static void get_name (dir_entry *dirent, char *s_name)
@@ -357,7 +357,7 @@
 			newclust = get_fatent(mydata, endclust);
 			if((newclust -1)!=endclust)
 				goto getit;
-			if (newclust <= 0x0001 || newclust >= 0xfff0) {
+			if (CHECK_CLUST(newclust, mydata->fatsize)) {
 				FAT_DPRINT("curclust: 0x%x\n", newclust);
 				FAT_DPRINT("Invalid FAT entry\n");
 				return gotsize;
@@ -392,7 +392,7 @@
 		filesize -= actsize;
 		buffer += actsize;
 		curclust = get_fatent(mydata, endclust);
-		if (curclust <= 0x0001 || curclust >= 0xfff0) {
+		if (CHECK_CLUST(newclust, mydata->fatsize)) {
 			FAT_DPRINT("curclust: 0x%x\n", curclust);
 			FAT_ERROR("Invalid FAT entry\n");
 			return gotsize;
@@ -440,6 +440,7 @@
  * into 'retdent'
  * Return 0 on success, -1 otherwise.
  */
+__attribute__ ((__aligned__(__alignof__(dir_entry))))
 __u8	 get_vfatname_block[MAX_CLUSTSIZE];
 static int
 get_vfatname(fsdata *mydata, int curclust, __u8 *cluster,
@@ -464,7 +465,7 @@
 
 		slotptr--;
 		curclust = get_fatent(mydata, curclust);
-		if (curclust <= 0x0001 || curclust >= 0xfff0) {
+		if (CHECK_CLUST(curclust, mydata->fatsize)) {
 			FAT_DPRINT("curclust: 0x%x\n", curclust);
 			FAT_ERROR("Invalid FAT entry\n");
 			return -1;
@@ -526,6 +527,7 @@
  * Get the directory entry associated with 'filename' from the directory
  * starting at 'startsect'
  */
+__attribute__ ((__aligned__(__alignof__(dir_entry))))
 __u8 get_dentfromdir_block[MAX_CLUSTSIZE];
 static dir_entry *get_dentfromdir (fsdata * mydata, int startsect,
 				   char *filename, dir_entry * retdent,
@@ -657,7 +659,7 @@
 	    return retdent;
 	}
 	curclust = get_fatent (mydata, curclust);
-	if (curclust <= 0x0001 || curclust >= 0xfff0) {
+	if (CHECK_CLUST(curclust, mydata->fatsize)) {
 	    FAT_DPRINT ("curclust: 0x%x\n", curclust);
 	    FAT_ERROR ("Invalid FAT entry\n");
 	    return NULL;
@@ -708,20 +710,16 @@
 	}
 	memcpy(volinfo, vistart, sizeof(volume_info));
 
-	/* Terminate fs_type string. Writing past the end of vistart
-	   is ok - it's just the buffer. */
-	vistart->fs_type[8] = '\0';
-
 	if (*fatsize == 32) {
-		if (compare_sign(FAT32_SIGN, vistart->fs_type) == 0) {
+		if (strncmp(FAT32_SIGN, vistart->fs_type, SIGNLEN) == 0) {
 			return 0;
 		}
 	} else {
-		if (compare_sign(FAT12_SIGN, vistart->fs_type) == 0) {
+		if (strncmp(FAT12_SIGN, vistart->fs_type, SIGNLEN) == 0) {
 			*fatsize = 12;
 			return 0;
 		}
-		if (compare_sign(FAT16_SIGN, vistart->fs_type) == 0) {
+		if (strncmp(FAT16_SIGN, vistart->fs_type, SIGNLEN) == 0) {
 			*fatsize = 16;
 			return 0;
 		}
@@ -731,7 +729,7 @@
 	return -1;
 }
 
-
+__attribute__ ((__aligned__(__alignof__(dir_entry))))
 __u8 do_fat_read_block[MAX_CLUSTSIZE];  /* Block buffer */
 long
 do_fat_read (const char *filename, void *buffer, unsigned long maxsize,
diff -Naur u-boot-1.3.1.org/include/fat.h u-boot-1.3.1/include/fat.h
--- u-boot-1.3.1.org/include/fat.h	2007-12-06 10:21:19.000000000 +0100
+++ u-boot-1.3.1/include/fat.h	2010-05-03 00:44:21.652892100 +0200
@@ -112,6 +112,9 @@
 			+ (mydata->fatsize != 32 ? 0 : \
 			  (FAT2CPU16((dent)->starthi) << 16)))
 
+#define CHECK_CLUST(x, fatsize) ((x) <= 1 || \
+				(x) >= ((fatsize) != 32 ? 0xfff0 : 0xffffff0))
+
 
 typedef struct boot_sector {
 	__u8	ignored[3];	/* Bootstrap code */
