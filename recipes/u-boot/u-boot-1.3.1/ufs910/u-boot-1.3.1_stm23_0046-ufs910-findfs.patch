diff -Naur u-boot-1.3.1/board/kathrein/ufs910/cmd_findfs.c u-boot-1.3.1-findfs/board/kathrein/ufs910/cmd_findfs.c
--- u-boot-1.3.1/board/kathrein/ufs910/cmd_findfs.c	1970-01-01 01:00:00.000000000 +0100
+++ u-boot-1.3.1-findfs/board/kathrein/ufs910/cmd_findfs.c	2010-05-15 01:40:59.000000000 +0200
@@ -0,0 +1,124 @@
+#include <common.h>
+
+#if defined(CONFIG_CMD_FINDFS)
+
+#include <command.h>
+#include <malloc.h>
+#include <part.h>
+#include <fat.h>
+#include <ext2fs.h>
+//#include <asm/byteorder.h>
+
+#ifdef DEBUG
+#define PRINTF(fmt,args...)	printf (fmt ,##args)
+#else
+#define PRINTF(fmt,args...)
+#endif
+
+#if (defined(CONFIG_CMD_IDE) || \
+     defined(CONFIG_CMD_SCSI) || \
+     defined(CONFIG_CMD_USB) || \
+     defined(CONFIG_MMC) || \
+     defined(CONFIG_SYSTEMACE) )
+
+static int do_findfs( cmd_tbl_t *cmdtp, int flag, int argc, char *argv[] )
+{
+	block_dev_desc_t *dev_desc = NULL;
+	char *block = malloc(SECTOR_SIZE);
+	int dev = 0;
+	char *fs = NULL;
+	int label_len = strlen(argv[1]);
+	
+	const struct block_drvr *drvr = block_drvr;
+	block_dev_desc_t* (*reloc_get_dev)(int dev);
+
+	while (drvr->name && fs == NULL) {
+		reloc_get_dev = drvr->get_dev + gd->reloc_off;
+		PRINTF("BUS: %s\n",drvr->name);
+		for (dev = 0; dev < 5; dev++) {
+			dev_desc = reloc_get_dev(dev);
+			if (dev_desc != NULL) {
+				int part;
+				for (part = 1; part < 17; part++) {
+					PRINTF("DEV: %d PART: %d\n",dev,part);
+					disk_partition_t info;
+					if (get_partition_info (dev_desc, part, &info)) {
+						/* invalid partition */
+						//break; /* or continue? */
+						continue;
+					}
+
+					if (dev_desc->block_read (0, info.start, 1, (ulong *)block) != 1) {
+						/* read error */
+						continue;
+					}
+					/* TODO: FAT16 support */
+					struct volume_info *volinfo = (struct volume_info*)(block + sizeof(boot_sector));
+					struct ext2_sblock *sblock = (struct ext2_sblock*)block;
+					char *label = NULL;
+
+					PRINTF("FAT Check: %8s\n",volinfo->fs_type);
+					if (strncmp(FAT32_SIGN, volinfo->fs_type, SIGNLEN) == 0) {
+						/* This is FAT32 */
+						/* strip spaces from label */
+						label = volinfo->volume_label + 10;
+						while (*label == ' ') {
+							*label = '\0';
+							label--;
+						}
+						volinfo->volume_label[11] = '\0';
+
+						label = volinfo->volume_label;
+						fs = "fatload";
+					}
+					else {
+						if (dev_desc->block_read (0, info.start+2, 1, (ulong *)block) != 1) {
+							/* read error */
+							continue;
+						}
+						PRINTF("EXT2 Check: 0x%x\n",__le16_to_cpu (sblock->magic));
+						if (__le16_to_cpu (sblock->magic) == EXT2_MAGIC) {
+							/* This is Ext2 */
+							PRINTF("EXT2 Check2: %16s\n",sblock->volume_name);
+							label = sblock->volume_name;
+							fs = "ext2load";
+						}
+					}
+
+					if (label != NULL && strlen(label) == label_len && strncmp(label,argv[1],label_len) == 0) {
+						/* found label*/
+						sprintf(block,"%d:%d",dev,part);
+						setenv("fsdev",block);
+						setenv("fsload",fs);
+						setenv("fsinterface",drvr->name);
+						break;
+					}
+					else {
+						fs = NULL;
+					}
+				}
+				if (fs != NULL)
+					break;
+			}
+		}
+		drvr++;
+	}
+
+	free(block);
+	/* 0 is positive */
+	if (fs == NULL) {
+		printf ("\n** Partition labeled %s not found **\n", argv[1]);
+		return 1;
+	}
+	return 0;
+}
+
+U_BOOT_CMD(
+	findfs, 2, 1, do_findfs,
+		"findfs - find partition by label\n",
+		"<label> - find partition labeled <label> on any active interface\n"
+		);
+
+#endif
+
+#endif
diff -Naur u-boot-1.3.1/board/kathrein/ufs910/Makefile u-boot-1.3.1-findfs/board/kathrein/ufs910/Makefile
--- u-boot-1.3.1/board/kathrein/ufs910/Makefile	2010-05-15 10:49:57.151909905 +0200
+++ u-boot-1.3.1-findfs/board/kathrein/ufs910/Makefile	2010-05-15 01:12:05.000000000 +0200
@@ -27,7 +27,7 @@
 
 SOBJS	= init-$(BOARD).o
 
-COBJS	= $(BOARD).o vfd.o cmd_bootmenu.o
+COBJS	= $(BOARD).o vfd.o cmd_bootmenu.o cmd_findfs.o
 
 SRCS	:= $(SOBJS:.o=.S) $(COBJS:.o=.c)
 OBJS	:= $(addprefix $(obj),$(COBJS))
diff -Naur u-boot-1.3.1/disk/part.c u-boot-1.3.1-findfs/disk/part.c
--- u-boot-1.3.1/disk/part.c	2010-05-15 10:49:55.040911663 +0200
+++ u-boot-1.3.1-findfs/disk/part.c	2010-05-15 01:12:05.000000000 +0200
@@ -40,12 +40,7 @@
      defined(CONFIG_MMC) || \
      defined(CONFIG_SYSTEMACE) )
 
-struct block_drvr {
-	char *name;
-	block_dev_desc_t* (*get_dev)(int dev);
-};
-
-static const struct block_drvr block_drvr[] = {
+const struct block_drvr block_drvr[] = {
 #if defined(CONFIG_CMD_IDE)
 	{ .name = "ide", .get_dev = ide_get_dev, },
 #endif
diff -Naur u-boot-1.3.1/fs/ext2/ext2fs.c u-boot-1.3.1-findfs/fs/ext2/ext2fs.c
--- u-boot-1.3.1/fs/ext2/ext2fs.c	2010-05-15 10:49:57.380165043 +0200
+++ u-boot-1.3.1-findfs/fs/ext2/ext2fs.c	2010-05-15 01:12:06.000000000 +0200
@@ -33,15 +33,6 @@
 extern int ext2fs_devread (int sector, int byte_offset, int byte_len,
 			   char *buf);
 
-/* Magic value used to identify an ext2 filesystem.  */
-#define	EXT2_MAGIC		0xEF53
-/* Amount of indirect blocks in an inode.  */
-#define INDIRECT_BLOCKS		12
-/* Maximum lenght of a pathname.  */
-#define EXT2_PATH_MAX		4096
-/* Maximum nesting of symlinks, used to prevent a loop.  */
-#define	EXT2_MAX_SYMLINKCNT	8
-
 /* Filetype used in directory entry.  */
 #define	FILETYPE_UNKNOWN	0
 #define	FILETYPE_REG		1
@@ -66,45 +57,6 @@
 /* The size of an ext2 block in bytes.  */
 #define EXT2_BLOCK_SIZE(data)	   (1 << LOG2_BLOCK_SIZE(data))
 
-/* The ext2 superblock.  */
-struct ext2_sblock {
-	uint32_t total_inodes;
-	uint32_t total_blocks;
-	uint32_t reserved_blocks;
-	uint32_t free_blocks;
-	uint32_t free_inodes;
-	uint32_t first_data_block;
-	uint32_t log2_block_size;
-	uint32_t log2_fragment_size;
-	uint32_t blocks_per_group;
-	uint32_t fragments_per_group;
-	uint32_t inodes_per_group;
-	uint32_t mtime;
-	uint32_t utime;
-	uint16_t mnt_count;
-	uint16_t max_mnt_count;
-	uint16_t magic;
-	uint16_t fs_state;
-	uint16_t error_handling;
-	uint16_t minor_revision_level;
-	uint32_t lastcheck;
-	uint32_t checkinterval;
-	uint32_t creator_os;
-	uint32_t revision_level;
-	uint16_t uid_reserved;
-	uint16_t gid_reserved;
-	uint32_t first_inode;
-	uint16_t inode_size;
-	uint16_t block_group_number;
-	uint32_t feature_compatibility;
-	uint32_t feature_incompat;
-	uint32_t feature_ro_compat;
-	uint32_t unique_id[4];
-	char volume_name[16];
-	char last_mounted_on[64];
-	uint32_t compression_info;
-};
-
 /* The ext2 blockgroup.  */
 struct ext2_block_group {
 	uint32_t block_id;
diff -Naur u-boot-1.3.1/include/configs/ufs910.h u-boot-1.3.1-findfs/include/configs/ufs910.h
--- u-boot-1.3.1/include/configs/ufs910.h	2010-05-15 10:49:57.152906959 +0200
+++ u-boot-1.3.1-findfs/include/configs/ufs910.h	2010-05-15 01:12:05.000000000 +0200
@@ -244,6 +244,7 @@
 #	define CONFIG_DOS_PARTITION
 #	define CONFIG_CMD_EXT2
 #	define CONFIG_CMD_FAT
+#	define CONFIG_CMD_FINDFS
 #endif
 
 /*-----------------------------------------------------------------------
diff -Naur u-boot-1.3.1/include/ext2fs.h u-boot-1.3.1-findfs/include/ext2fs.h
--- u-boot-1.3.1/include/ext2fs.h	2007-12-06 10:21:19.000000000 +0100
+++ u-boot-1.3.1-findfs/include/ext2fs.h	2010-05-15 01:12:05.000000000 +0200
@@ -25,10 +25,22 @@
  * from the original ext2 fs code, as found in the linux kernel.
  */
 
+#ifndef _EXT2FS_H_
+#define _EXT2FS_H_
+
+#include <asm/byteorder.h>
 
-#define SECTOR_SIZE		0x200
 #define SECTOR_BITS		9
 
+/* Magic value used to identify an ext2 filesystem.  */
+#define	EXT2_MAGIC		0xEF53
+/* Amount of indirect blocks in an inode.  */
+#define INDIRECT_BLOCKS		12
+/* Maximum lenght of a pathname.  */
+#define EXT2_PATH_MAX		4096
+/* Maximum nesting of symlinks, used to prevent a loop.  */
+#define	EXT2_MAX_SYMLINKCNT	8
+
 /* Error codes */
 typedef enum
 {
@@ -72,6 +84,45 @@
   MAX_ERR_NUM
 } ext2fs_error_t;
 
+/* The ext2 superblock.  */
+struct ext2_sblock {
+	uint32_t total_inodes;
+	uint32_t total_blocks;
+	uint32_t reserved_blocks;
+	uint32_t free_blocks;
+	uint32_t free_inodes;
+	uint32_t first_data_block;
+	uint32_t log2_block_size;
+	uint32_t log2_fragment_size;
+	uint32_t blocks_per_group;
+	uint32_t fragments_per_group;
+	uint32_t inodes_per_group;
+	uint32_t mtime;
+	uint32_t utime;
+	uint16_t mnt_count;
+	uint16_t max_mnt_count;
+	uint16_t magic;
+	uint16_t fs_state;
+	uint16_t error_handling;
+	uint16_t minor_revision_level;
+	uint32_t lastcheck;
+	uint32_t checkinterval;
+	uint32_t creator_os;
+	uint32_t revision_level;
+	uint16_t uid_reserved;
+	uint16_t gid_reserved;
+	uint32_t first_inode;
+	uint16_t inode_size;
+	uint16_t block_group_number;
+	uint32_t feature_compatibility;
+	uint32_t feature_incompat;
+	uint32_t feature_ro_compat;
+	uint32_t unique_id[4];
+	char volume_name[16];
+	char last_mounted_on[64];
+	uint32_t compression_info;
+};
+
 
 extern int ext2fs_set_blk_dev(block_dev_desc_t *rbdd, int part);
 extern int ext2fs_ls (char *dirname);
@@ -79,3 +130,5 @@
 extern int ext2fs_read (char *buf, unsigned len);
 extern int ext2fs_mount (unsigned part_length);
 extern int ext2fs_close(void);
+
+#endif
diff -Naur u-boot-1.3.1/include/fat.h u-boot-1.3.1-findfs/include/fat.h
--- u-boot-1.3.1/include/fat.h	2010-05-15 10:49:57.382176961 +0200
+++ u-boot-1.3.1-findfs/include/fat.h	2010-05-15 01:12:06.000000000 +0200
@@ -31,8 +31,6 @@
 
 #define CONFIG_SUPPORT_VFAT
 
-#define SECTOR_SIZE FS_BLOCK_SIZE
-
 #define FS_BLOCK_SIZE 512
 
 #if FS_BLOCK_SIZE != SECTOR_SIZE
diff -Naur u-boot-1.3.1/include/part.h u-boot-1.3.1-findfs/include/part.h
--- u-boot-1.3.1/include/part.h	2010-05-15 10:49:53.877909725 +0200
+++ u-boot-1.3.1-findfs/include/part.h	2010-05-15 01:12:05.000000000 +0200
@@ -25,6 +25,8 @@
 
 #include <ide.h>
 
+#define SECTOR_SIZE		512
+
 typedef struct block_dev_desc {
 	int		if_type;	/* type of the interface */
 	int	        dev;	  	/* device number */
@@ -51,6 +53,8 @@
 				       const void *buffer);
 }block_dev_desc_t;
 
+
+
 /* Interface types: */
 #define IF_TYPE_UNKNOWN		0
 #define IF_TYPE_IDE		1
@@ -131,4 +135,11 @@
 int   test_part_amiga (block_dev_desc_t *dev_desc);
 #endif
 
+struct block_drvr {
+	char *name;
+	block_dev_desc_t* (*get_dev)(int dev);
+};
+
+extern const struct block_drvr block_drvr[];
+
 #endif /* _PART_H */
