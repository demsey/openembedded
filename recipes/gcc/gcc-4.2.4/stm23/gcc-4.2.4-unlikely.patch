Index: gcc-4.2-4.orig/gcc/defaults.h
===================================================================
--- gcc-4.2-4.orig/gcc/defaults.h	(revision 1085)
+++ gcc-4.2-4/gcc/defaults.h	(revision 1086)
@@ -699,6 +699,14 @@
 #define TARGET_DEC_EVAL_METHOD 2
 #endif
 
+#ifndef HOT_TEXT_SECTION_PREFIX
+#define HOT_TEXT_SECTION_PREFIX ".hot"
+#endif
+
+#ifndef UNLIKELY_EXECUTED_TEXT_SECTION_PREFIX
+#define UNLIKELY_EXECUTED_TEXT_SECTION_PREFIX ".unlikely"
+#endif
+
 #ifndef HOT_TEXT_SECTION_NAME
 #define HOT_TEXT_SECTION_NAME ".text.hot"
 #endif
Index: gcc-4.2-4.orig/gcc/dwarf2out.c
===================================================================
--- gcc-4.2-4.orig/gcc/dwarf2out.c	(revision 1085)
+++ gcc-4.2-4/gcc/dwarf2out.c	(revision 1086)
@@ -13976,7 +13976,7 @@
   ASM_OUTPUT_LABEL (asm_out_file, text_section_label);
   if (flag_reorder_blocks_and_partition)
     {
-      switch_to_section (unlikely_text_section ());
+      switch_to_section (unlikely_text_section (current_function_decl));
       ASM_OUTPUT_LABEL (asm_out_file, cold_text_section_label);
     }
 }
@@ -14368,7 +14368,7 @@
   targetm.asm_out.internal_label (asm_out_file, TEXT_END_LABEL, 0);
   if (flag_reorder_blocks_and_partition)
     {
-      switch_to_section (unlikely_text_section ());
+      switch_to_section (unlikely_text_section (current_function_decl));
       targetm.asm_out.internal_label (asm_out_file, COLD_END_LABEL, 0);
     }
 
Index: gcc-4.2-4.orig/gcc/predict.c
===================================================================
--- gcc-4.2-4.orig/gcc/predict.c	(revision 1085)
+++ gcc-4.2-4/gcc/predict.c	(revision 1086)
@@ -1850,8 +1850,6 @@
       BITMAP_FREE (tovisit);
     }
   compute_function_frequency ();
-  if (flag_reorder_functions)
-    choose_function_section ();
 }
 
 /* Decide whether function is hot, cold or unlikely executed.  */
@@ -1875,34 +1873,6 @@
     }
 }
 
-/* Choose appropriate section for the function.  */
-static void
-choose_function_section (void)
-{
-  if (DECL_SECTION_NAME (current_function_decl)
-      || !targetm.have_named_sections
-      /* Theoretically we can split the gnu.linkonce text section too,
-	 but this requires more work as the frequency needs to match
-	 for all generated objects so we need to merge the frequency
-	 of all instances.  For now just never set frequency for these.  */
-      || DECL_ONE_ONLY (current_function_decl))
-    return;
-
-  /* If we are doing the partitioning optimization, let the optimization
-     choose the correct section into which to put things.  */
-
-  if (flag_reorder_blocks_and_partition)
-    return;
-
-  if (cfun->function_frequency == FUNCTION_FREQUENCY_HOT)
-    DECL_SECTION_NAME (current_function_decl) =
-      build_string (strlen (HOT_TEXT_SECTION_NAME), HOT_TEXT_SECTION_NAME);
-  if (cfun->function_frequency == FUNCTION_FREQUENCY_UNLIKELY_EXECUTED)
-    DECL_SECTION_NAME (current_function_decl) =
-      build_string (strlen (UNLIKELY_EXECUTED_TEXT_SECTION_NAME),
-		    UNLIKELY_EXECUTED_TEXT_SECTION_NAME);
-}
-
 static bool
 gate_estimate_probability (void)
 {
Index: gcc-4.2-4.orig/gcc/varasm.c
===================================================================
--- gcc-4.2-4.orig/gcc/varasm.c	(revision 1085)
+++ gcc-4.2-4/gcc/varasm.c	(revision 1086)
@@ -98,11 +98,6 @@
 
 tree last_assemble_variable_decl;
 
-/* The following global variable indicates if the first basic block
-   in a function belongs to the cold partition or not.  */
-
-bool first_function_block_is_cold;
-
 /* We give all constants their own alias set.  Perhaps redundant with
    MEM_READONLY_P, but pre-dates it.  */
 
@@ -380,64 +375,30 @@
 static void
 initialize_cold_section_name (void)
 {
-  const char *stripped_name;
-  char *name, *buffer;
-  tree dsn;
-
   gcc_assert (cfun && current_function_decl);
+
   if (cfun->unlikely_text_section_name)
     return;
 
-  dsn = DECL_SECTION_NAME (current_function_decl);
-  if (flag_function_sections && dsn)
-    {
-      name = alloca (TREE_STRING_LENGTH (dsn) + 1);
-      memcpy (name, TREE_STRING_POINTER (dsn), TREE_STRING_LENGTH (dsn) + 1);
-
-      stripped_name = targetm.strip_name_encoding (name);
-
-      buffer = ACONCAT ((stripped_name, "_unlikely", NULL));
-      cfun->unlikely_text_section_name = ggc_strdup (buffer);
-    }
-  else
-    cfun->unlikely_text_section_name =  UNLIKELY_EXECUTED_TEXT_SECTION_NAME;
+  cfun->unlikely_text_section_name = DECL_SECTION_NAME (current_function_decl)
+    ? TREE_STRING_POINTER (DECL_SECTION_NAME (current_function_decl))
+    : UNLIKELY_EXECUTED_TEXT_SECTION_NAME;
 }
 
 /* Tell assembler to switch to unlikely-to-be-executed text section.  */
 
 section *
-unlikely_text_section (void)
+unlikely_text_section (tree decl)
 {
   if (cfun)
     {
       if (!cfun->unlikely_text_section_name)
 	initialize_cold_section_name ();
 
-      return get_named_section (NULL, cfun->unlikely_text_section_name, 0);
+      return get_named_section (decl, cfun->unlikely_text_section_name, 0);
     }
   else
-    return get_named_section (NULL, UNLIKELY_EXECUTED_TEXT_SECTION_NAME, 0);
-}
-
-/* When called within a function context, return true if the function
-   has been assigned a cold text section and if SECT is that section.
-   When called outside a function context, return true if SECT is the
-   default cold section.  */
-
-bool
-unlikely_text_section_p (section *sect)
-{
-  const char *name;
-
-  if (cfun)
-    name = cfun->unlikely_text_section_name;
-  else
-    name = UNLIKELY_EXECUTED_TEXT_SECTION_NAME;
-
-  return (name
-	  && sect
-	  && SECTION_STYLE (sect) == SECTION_NAMED
-	  && strcmp (name, sect->named.name) == 0);
+    return get_named_section (decl, UNLIKELY_EXECUTED_TEXT_SECTION_NAME, 0);
 }
 
 /* Return a section with a particular name and with whatever SECTION_*
@@ -542,6 +503,8 @@
       && DECL_SECTION_NAME (decl) != NULL_TREE
       && targetm.have_named_sections)
     return get_named_section (decl, NULL, 0);
+  else if (cfun->function_frequency == FUNCTION_FREQUENCY_HOT)
+    return get_named_section (decl, HOT_TEXT_SECTION_NAME, 0);
   else
     return text_section;
 }
@@ -555,20 +518,19 @@
 section *
 function_section (tree decl)
 {
-  int reloc = 0;
-
-  if (first_function_block_is_cold)
-    reloc = 1;
+  gcc_assert (decl == current_function_decl);
 
 #ifdef USE_SELECT_SECTION_FOR_FUNCTIONS
   if (decl != NULL_TREE
       && DECL_SECTION_NAME (decl) != NULL_TREE)
-    return reloc ? unlikely_text_section ()
+    return in_cold_section_p ? unlikely_text_section (decl)
 		 : get_named_section (decl, NULL, 0);
   else
-    return targetm.asm_out.select_section (decl, reloc, DECL_ALIGN (decl));
+    return targetm.asm_out.select_section (decl, in_cold_section_p,
+					   DECL_ALIGN (decl));
 #else
-  return reloc ? unlikely_text_section () : hot_function_section (decl);
+  return in_cold_section_p
+    ? unlikely_text_section (decl) : hot_function_section (decl);
 #endif
 }
 
@@ -578,7 +540,7 @@
 #ifdef USE_SELECT_SECTION_FOR_FUNCTIONS
   if (current_function_decl != NULL_TREE
       && DECL_SECTION_NAME (current_function_decl) != NULL_TREE)
-    return in_cold_section_p ? unlikely_text_section ()
+    return in_cold_section_p ? unlikely_text_section (current_function_decl)
 			     : get_named_section (current_function_decl,
 						  NULL, 0);
   else
@@ -587,7 +549,7 @@
 					   DECL_ALIGN (current_function_decl));
 #else
   return (in_cold_section_p
-	  ? unlikely_text_section ()
+	  ? unlikely_text_section (current_function_decl)
 	  : hot_function_section (current_function_decl));
 #endif
 }
@@ -1345,7 +1307,7 @@
 
   cfun->unlikely_text_section_name = NULL;
 
-  first_function_block_is_cold = false;
+  in_cold_section_p = false;
   if (flag_reorder_blocks_and_partition)
     {
       ASM_GENERATE_INTERNAL_LABEL (tmp_label, "LHOTB", const_labelno);
@@ -1382,7 +1344,7 @@
 
   if (flag_reorder_blocks_and_partition)
     {
-      switch_to_section (unlikely_text_section ());
+      switch_to_section (unlikely_text_section (decl));
       assemble_align (FUNCTION_BOUNDARY);
       ASM_OUTPUT_LABEL (asm_out_file, cfun->cold_section_label);
 
@@ -1396,25 +1358,21 @@
 	  assemble_align (FUNCTION_BOUNDARY);
 	  ASM_OUTPUT_LABEL (asm_out_file, cfun->hot_section_label);
 	  hot_label_written = true;
-	  first_function_block_is_cold = true;
+	  in_cold_section_p = true;
 	}
     }
   else if (DECL_SECTION_NAME (decl))
     {
-      /* Calls to function_section rely on first_function_block_is_cold
+      /* Calls to function_section rely on in_cold_section_p
 	 being accurate.  The first block may be cold even if we aren't
 	 doing partitioning, if the entire function was decided by
 	 choose_function_section (predict.c) to be cold.  */
 
       initialize_cold_section_name ();
-
-      if (cfun->unlikely_text_section_name
-	  && strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)),
-		     cfun->unlikely_text_section_name) == 0)
-	first_function_block_is_cold = true;
     }
 
-  in_cold_section_p = first_function_block_is_cold;
+  if (cfun->function_frequency == FUNCTION_FREQUENCY_UNLIKELY_EXECUTED)
+    	in_cold_section_p = true;
 
   /* Switch to the correct text section for the start of the function.  */
 
@@ -1499,9 +1457,9 @@
       section *save_text_section;
 
       save_text_section = in_section;
-      switch_to_section (unlikely_text_section ());
+      switch_to_section (unlikely_text_section (decl));
       ASM_OUTPUT_LABEL (asm_out_file, cfun->cold_section_end_label);
-      if (first_function_block_is_cold)
+      if (in_cold_section_p)
 	switch_to_section (text_section);
       else
 	switch_to_section (function_section (decl));
@@ -5599,7 +5557,9 @@
   bool one_only = DECL_ONE_ONLY (decl) && !HAVE_COMDAT_GROUP;
   const char *prefix, *name;
   size_t nlen, plen;
+  size_t llen = 0;
   char *string;
+  const char *loc_string = NULL;
 
   switch (categorize_decl_for_section (decl, reloc))
     {
@@ -5655,11 +5615,24 @@
   name = targetm.strip_name_encoding (name);
   nlen = strlen (name);
 
-  string = alloca (nlen + plen + 1);
+  if (cfun)
+    {
+      if (cfun->function_frequency == FUNCTION_FREQUENCY_HOT)
+	loc_string = HOT_TEXT_SECTION_PREFIX;
+      else if (cfun->function_frequency == FUNCTION_FREQUENCY_UNLIKELY_EXECUTED)
+	loc_string = UNLIKELY_EXECUTED_TEXT_SECTION_PREFIX;
+      if (loc_string)
+	llen = strlen (loc_string);
+    }
+
+  string = alloca (nlen + plen + llen + 1);
   memcpy (string, prefix, plen);
   memcpy (string + plen, name, nlen + 1);
 
-  DECL_SECTION_NAME (decl) = build_string (nlen + plen, string);
+  if (llen)
+    memcpy (string + plen + nlen, loc_string, llen + 1);
+
+  DECL_SECTION_NAME (decl) = build_string (strlen (string), string);
 }
 
 /* Like compute_reloc_for_constant, except for an RTX.  The return value
Index: gcc-4.2-4.orig/gcc/output.h
===================================================================
--- gcc-4.2-4.orig/gcc/output.h	(revision 1085)
+++ gcc-4.2-4/gcc/output.h	(revision 1086)
@@ -376,8 +376,6 @@
 extern int size_directive_output;
 extern tree last_assemble_variable_decl;
 
-extern bool first_function_block_is_cold;
-
 /* Decide whether DECL needs to be in a writable section.
    RELOC is the same as for SELECT_SECTION.  */
 extern bool decl_readonly_section (tree, int);
@@ -565,10 +563,9 @@
 					    unsigned HOST_WIDE_INT,
 					    unsigned int);
 extern section *function_section (tree);
-extern section *unlikely_text_section (void);
+extern section *unlikely_text_section (tree);
 extern section *current_function_section (void);
 
-extern bool unlikely_text_section_p (section *);
 extern void switch_to_section (section *);
 extern void output_section_asm_op (const void *);
 
