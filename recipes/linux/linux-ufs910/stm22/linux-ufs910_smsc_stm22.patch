diff -rcN linux/drivers/net/smsc_911x/st40.c UFS910/smsc/st40.c
*** linux/drivers/net/smsc_911x/st40.c	2009-02-21 22:41:08.000000000 +0100
--- UFS910/smsc/st40.c	2009-02-24 18:40:38.000000000 +0100
***************
*** 48,55 ****
  
  //for a description of these MACROs see readme.txt
  
! #define PLATFORM_IRQ_POL	(0UL)
! #define PLATFORM_IRQ_TYPE	(0UL)
  
  #define DB641_USE_PORT0
  #if defined(CONFIG_SH_STI5528_EVAL)
--- 48,55 ----
  
  //for a description of these MACROs see readme.txt
  
! #define PLATFORM_IRQ_POL	(1UL)
! #define PLATFORM_IRQ_TYPE	(1UL)
  
  #define DB641_USE_PORT0
  #if defined(CONFIG_SH_STI5528_EVAL)
***************
*** 63,68 ****
--- 63,71 ----
  #define PLATFORM_CSBASE		(0xA3400000UL)
  #define PLATFORM_IRQ		(9UL)
  #endif
+ #elif defined(CONFIG_SH_STB7100_REF)
+ #define PLATFORM_CSBASE		(0xA2000000UL)
+ #define PLATFORM_IRQ		(2UL)
  #elif defined(CONFIG_SH_STB7100_MBOARD)
  /* db641 STEM card plugged into mb376 */
  #ifdef DB641_USE_PORT0
***************
*** 83,97 ****
  #define PLATFORM_IRQ		IRL0_IRQ
  #define PLATFORM_IRQ_POL	(1UL)
  #define PLATFORM_IRQ_TYPE	(1UL)
- #elif defined(CONFIG_SH_STB5202_REF)
- /* ST STB5202 mb602 with in-built SMSC 911x */
- #undef PLATFORM_IRQ_POL
- #undef PLATFORM_IRQ_TYPE
- 
- #define PLATFORM_CSBASE		(0xA3000000UL)
- #define PLATFORM_IRQ		IRL0_IRQ
- #define PLATFORM_IRQ_POL	(1UL)
- #define PLATFORM_IRQ_TYPE	(1UL)
  #else
  #error Unknown board
  #endif
--- 86,91 ----
***************
*** 508,514 ****
  	void* pCallbackData)
  { return FALSE; }
  #else
! #ifdef CONFIG_STB7100_FDMA
  #include "st40-shdma.c"
  #else
  #include "st40-gpdma.c"
--- 502,508 ----
  	void* pCallbackData)
  { return FALSE; }
  #else
! #ifdef CONFIG_STM_DMA
  #include "st40-shdma.c"
  #else
  #include "st40-gpdma.c"
diff -rcN linux/drivers/net/smsc_911x/st40-shdma.c UFS910/smsc/st40-shdma.c
*** linux/drivers/net/smsc_911x/st40-shdma.c	2009-02-21 22:41:07.000000000 +0100
--- UFS910/smsc/st40-shdma.c	2009-02-24 18:40:38.000000000 +0100
***************
*** 1,11 ****
  #include <linux/dma-mapping.h>
  #include <asm/dma.h>
  #include <linux/stm/stm-dma.h>
! #include <linux/stm/710x_fdma.h>
  
  static struct stm_dma_params tx_transfer;
  
! static void err_cb(void* x);
  static DWORD smsc911x_request_dma(const char* chan);
  
  #if defined (CONFIG_SMSC911x_DMA_PACED)
--- 1,11 ----
  #include <linux/dma-mapping.h>
  #include <asm/dma.h>
  #include <linux/stm/stm-dma.h>
! #include <linux/stm/fdma-reqs.h>
  
  static struct stm_dma_params tx_transfer;
  
! static void err_cb(unsigned long);
  static DWORD smsc911x_request_dma(const char* chan);
  
  #if defined (CONFIG_SMSC911x_DMA_PACED)
***************
*** 20,36 ****
  #define SMSC_SHORT_PTK_CHAN 1
  #define SMSC_LONG_PTK_CHAN 0
  
  
! /*we wont know until runtime which req #  to use (platform - dep)*/
! struct fmdareq_RequestConfig_s new_rqs[2] = {
! /*10*/{0, READ,  OPCODE_32,4,DISABLE_FLG,0,1 },  /* SSC 1 txbuff empty */
! /*11*/{0, READ,  OPCODE_32,1,DISABLE_FLG,0,1 }  /* SSC 2 txbuff empty */
! };
  
  DWORD Platform_RequestDmaChannelSg(
  	PPLATFORM_DATA platformData)
  {
! 	return smsc911x_request_dma(STM_DMA_CAP_ETH_BUF);
  }
  
  static void Platform_ReleaseDmaChannel_sg(void)
--- 20,72 ----
  #define SMSC_SHORT_PTK_CHAN 1
  #define SMSC_LONG_PTK_CHAN 0
  
+ static struct stm_dma_req_config dma_req_configs[2] = {
+ {
+ 	/* Long packet: 4*read32 */
+ 	.rw		= REQ_CONFIG_READ,
+ 	.opcode		= REQ_CONFIG_OPCODE_32,
+ 	.count		= 4,
+ 	.increment	= 0,
+ 	.hold_off	= 0,
+ 	.initiator	= 1,
+ }, {
+ 	/* Short packet: 1*read32 */
+ 	.rw		= REQ_CONFIG_READ,
+ 	.opcode		= REQ_CONFIG_OPCODE_32,
+ 	.count		= 1,
+ 	.increment	= 0,
+ 	.hold_off	= 0,
+ 	.initiator	= 1,
+ }};
  
! static struct stm_dma_req *dma_reqs[2];
  
  DWORD Platform_RequestDmaChannelSg(
  	PPLATFORM_DATA platformData)
  {
! 	DWORD chan;
! 	int devid = ctrl_inl(SYSCONF_DEVID);
! 	int chip_7109 = (((devid >> 12) & 0x3ff) == 0x02c);
! 	int dma_req_lines[2];
! 
! 	chan = smsc911x_request_dma(STM_DMA_CAP_ETH_BUF);
! 	if (chan < 0)
! 		return chan;
! 
! 	if(chip_7109){
! 		dma_req_lines[SMSC_LONG_PTK_CHAN] = STB7109_FDMA_REQ_SSC_1_TX;
! 		dma_req_lines[SMSC_SHORT_PTK_CHAN] = STB7109_FDMA_REQ_SSC_2_TX;
! 	}
! 	else {
! 		dma_req_lines[SMSC_LONG_PTK_CHAN] = STB7100_FDMA_REQ_SSC_1_TX;
! 		dma_req_lines[SMSC_SHORT_PTK_CHAN] = STB7100_FDMA_REQ_SSC_2_TX;
! 	}
! 
! 	dma_reqs[0] = dma_req_config(chan, dma_req_lines[0], &dma_req_configs[0]);
! 	dma_reqs[1] = dma_req_config(chan, dma_req_lines[1], &dma_req_configs[1]);
! 
! printk("%s: req %x and %x\n", __FUNCTION__, dma_reqs[0], dma_reqs[1]);
! 	return chan;
  }
  
  static void Platform_ReleaseDmaChannel_sg(void)
***************
*** 38,76 ****
  	int i;
  
  	for(i=0;i<MAX_NODELIST_LEN;i++)
! 		dma_free_descriptor(&rx_transfer_paced[i]);
  }
  
  static void Platform_DmaInitialize_sg(void)
  {
  	int i;
- 	int devid = ctrl_inl(SYSCONF_DEVID);
- 	int chip_7109 = (((devid >> 12) & 0x3ff) == 0x02c);
  
  	SMSC_TRACE("DMA Rx using paced transfers to main register bank");
  
  	for(i=0;i<MAX_NODELIST_LEN;i++){
! 		declare_dma_parms(&rx_transfer_paced[i],
! 				  MODE_PACED,
! 				  STM_DMA_LIST_OPEN,
! 				  STM_DMA_SETUP_CONTEXT_ISR,
! 				  STM_DMA_NOBLOCK_MODE,
! 				  (char*)STM_DMAC_ID);
! 		dma_parms_err_cb(&rx_transfer_paced[i], err_cb, NULL, 0);
! 	}
! 
! 	if(chip_7109){
! 		new_rqs[SMSC_LONG_PTK_CHAN].Index = STB7109_FDMA_REQ_SSC_1_TX;
! 		new_rqs[SMSC_SHORT_PTK_CHAN].Index = STB7109_FDMA_REQ_SSC_2_TX;
  	}
! 	else {
! 		new_rqs[SMSC_LONG_PTK_CHAN].Index = STB7100_FDMA_REQ_SSC_1_TX;
! 		new_rqs[SMSC_SHORT_PTK_CHAN].Index = STB7100_FDMA_REQ_SSC_2_TX;
! 	}
! 
! 	dma_manual_stbus_pacing(&rx_transfer_paced[0],&new_rqs[0]);
! 	dma_manual_stbus_pacing(&rx_transfer_paced[0],&new_rqs[1]);
! 
  }
  #else
  static struct stm_dma_params rx_transfer_sg;
--- 74,94 ----
  	int i;
  
  	for(i=0;i<MAX_NODELIST_LEN;i++)
! 		dma_params_free(&rx_transfer_paced[i]);
  }
  
  static void Platform_DmaInitialize_sg(void)
  {
  	int i;
  
  	SMSC_TRACE("DMA Rx using paced transfers to main register bank");
  
  	for(i=0;i<MAX_NODELIST_LEN;i++){
! 		dma_params_init(&rx_transfer_paced[i],
! 			       MODE_PACED,
! 			       STM_DMA_LIST_OPEN);
  	}
! 	dma_params_err_cb(&rx_transfer_paced[0], err_cb, 0, STM_DMA_CB_CONTEXT_TASKLET);
  }
  #else
  static struct stm_dma_params rx_transfer_sg;
***************
*** 83,106 ****
  
  static void Platform_ReleaseDmaChannel_sg(void)
  {
! 	dma_free_descriptor(&rx_transfer_sg);
  }
  
  static void Platform_DmaInitialize_sg(void)
  {
! 	declare_dma_parms(&rx_transfer_sg,
! 			  MODE_DST_SCATTER,
! 			  STM_DMA_LIST_OPEN,
! 			  STM_DMA_SETUP_CONTEXT_ISR,
! 			  STM_DMA_NOBLOCK_MODE,
! 			  (char*)STM_DMAC_ID);
! 	dma_parms_err_cb(&rx_transfer_sg, err_cb, NULL, 0);
  #if defined(CONFIG_SMSC911x_DMA_2D)
  	SMSC_TRACE("DMA Rx using freefrunning 2D transfers");
! 	dma_parms_DIM_2_x_1(&rx_transfer_sg,0x20,0);
  #elif defined(CONFIG_SMSC911x_DMA_FIFOSEL)
  	SMSC_TRACE("DMA Rx using freefrunning 1D transfers and FIFOSEL");
! 	dma_parms_DIM_1_x_1(&rx_transfer_sg,0);
  #else
  #error Unknown DMA mode
  #endif
--- 101,121 ----
  
  static void Platform_ReleaseDmaChannel_sg(void)
  {
! 	dma_params_free(&rx_transfer_sg);
  }
  
  static void Platform_DmaInitialize_sg(void)
  {
! 	dma_params_init(&rx_transfer_sg,
! 		       MODE_DST_SCATTER,
! 		       STM_DMA_LIST_OPEN);
! 	dma_params_err_cb(&rx_transfer_sg, err_cb, 0, STM_DMA_CB_CONTEXT_TASKLET);
  #if defined(CONFIG_SMSC911x_DMA_2D)
  	SMSC_TRACE("DMA Rx using freefrunning 2D transfers");
! 	dma_params_DIM_2_x_1(&rx_transfer_sg,0x20,0);
  #elif defined(CONFIG_SMSC911x_DMA_FIFOSEL)
  	SMSC_TRACE("DMA Rx using freefrunning 1D transfers and FIFOSEL");
! 	dma_params_DIM_1_x_1(&rx_transfer_sg);
  #else
  #error Unknown DMA mode
  #endif
***************
*** 137,165 ****
  	DWORD dwDmaChannel)
  {
  	free_dma(dwDmaChannel);
! 	dma_free_descriptor(&tx_transfer);
  	Platform_ReleaseDmaChannel_sg();
  }
  
! static void err_cb(void* x)
  {
  	printk("DMA err callback");
  }
  
! 
  BOOLEAN Platform_DmaInitialize(
  	PPLATFORM_DATA platformData,
  	DWORD dwDmaCh)
  {
  	/* From memory to LAN */
! 	declare_dma_parms(  	&tx_transfer,
  				MODE_FREERUNNING,
! 			       	STM_DMA_LIST_OPEN,
! 			       	STM_DMA_SETUP_CONTEXT_ISR,
! 			       	STM_DMA_NOBLOCK_MODE,
! 			       	(char*)STM_DMAC_ID);
! 	dma_parms_err_cb(&tx_transfer, err_cb, NULL, 0);
! 	dma_parms_DIM_1_x_2(&tx_transfer,0x20,0);
  
  	Platform_DmaInitialize_sg();
  
--- 152,177 ----
  	DWORD dwDmaChannel)
  {
  	free_dma(dwDmaChannel);
! 	dma_params_free(&tx_transfer);
  	Platform_ReleaseDmaChannel_sg();
  }
  
! static void err_cb(unsigned long dummy)
  {
  	printk("DMA err callback");
  }
  
! /* This gets called twice, once each for for Rx and Tx channels */
  BOOLEAN Platform_DmaInitialize(
  	PPLATFORM_DATA platformData,
  	DWORD dwDmaCh)
  {
  	/* From memory to LAN */
! 	dma_params_init(  	&tx_transfer,
  				MODE_FREERUNNING,
! 			       	STM_DMA_LIST_OPEN);
! 	dma_params_err_cb(&tx_transfer, err_cb, 0, STM_DMA_CB_CONTEXT_TASKLET);
! 	dma_params_DIM_1_x_2(&tx_transfer,0x20,0);
  
  	Platform_DmaInitialize_sg();
  
***************
*** 175,181 ****
  {
  	DWORD dwAlignMask;
  	DWORD dwLanPhysAddr, dwMemPhysAddr;
! 	stm_dma_params *dmap;
  	unsigned long src, dst;
  	unsigned long res=0;
  	// 1. validate the requested channel #
--- 187,193 ----
  {
  	DWORD dwAlignMask;
  	DWORD dwLanPhysAddr, dwMemPhysAddr;
! 	struct stm_dma_params *dmap;
  	unsigned long src, dst;
  	unsigned long res=0;
  	// 1. validate the requested channel #
***************
*** 214,222 ****
  	dst = PHYSADDR(dwLanPhysAddr);
  	dmap = &tx_transfer;
  
! 	dma_parms_comp_cb(dmap, pCallback, pCallbackData, 0);
! 	dma_parms_addrs(dmap,src,dst, pDmaXfer->dwDwCnt << 2);
! 	res=dma_compile_list(dmap);
  	if(res != 0)
  		goto err_exit;
  	// 6. Start the transfer
--- 226,237 ----
  	dst = PHYSADDR(dwLanPhysAddr);
  	dmap = &tx_transfer;
  
! 	dma_params_comp_cb(dmap,
! 			   (void (*)(unsigned long))pCallback,
! 			   (unsigned long)pCallbackData,
! 			   STM_DMA_CB_CONTEXT_TASKLET);
! 	dma_params_addrs(dmap,src,dst, pDmaXfer->dwDwCnt << 2);
! 	res=dma_compile_list(pDmaXfer->dwDmaCh, dmap, GFP_KERNEL);
  	if(res != 0)
  		goto err_exit;
  	// 6. Start the transfer
***************
*** 275,300 ****
  		int short_len = sg_dma_len(sg) & 127;
  
  		if (long_len) {
! 			dma_parms_addrs(param,
  					dwLanPhysAddr,
  					sg_dma_address(sg),
  					long_len);
! 			dma_parms_paced(param,
! 					long_len,
! 					new_rqs[SMSC_LONG_PTK_CHAN].Index);
! 			dma_link_nodes(param, param+1);
  			param++;
  		}
  
  		if (short_len) {
! 			dma_parms_addrs(param,
  					dwLanPhysAddr,
  					sg_dma_address(sg) + long_len,
  					short_len);
! 			dma_parms_paced(param,
! 					short_len,
! 					new_rqs[SMSC_SHORT_PTK_CHAN].Index);
! 			dma_link_nodes(param, param+1);
  			param++;
  		}
  
--- 290,313 ----
  		int short_len = sg_dma_len(sg) & 127;
  
  		if (long_len) {
! 			dma_params_DIM_0_x_1(param);
! 			dma_params_addrs(param,
  					dwLanPhysAddr,
  					sg_dma_address(sg),
  					long_len);
! 			dma_params_req(param, dma_reqs[SMSC_LONG_PTK_CHAN]);
! 			dma_params_link(param, param+1);
  			param++;
  		}
  
  		if (short_len) {
! 			dma_params_DIM_0_x_1(param);
! 			dma_params_addrs(param,
  					dwLanPhysAddr,
  					sg_dma_address(sg) + long_len,
  					short_len);
! 			dma_params_req(param, dma_reqs[SMSC_SHORT_PTK_CHAN]);
! 			dma_params_link(param, param+1);
  			param++;
  		}
  
***************
*** 302,311 ****
  	}
  
  	param--;
! 	dma_link_nodes(param, NULL);
  
! 	dma_parms_comp_cb(param, pCallback, pCallbackData, 0);
! 	res=dma_compile_list(rx_transfer_paced);
  	if(res != 0)
  		goto err_exit;
  	// 6. Start the transfer
--- 315,327 ----
  	}
  
  	param--;
! 	dma_params_link(param, NULL);
  
! 	dma_params_comp_cb(rx_transfer_paced,
! 			   (void (*)(unsigned long))pCallback,
! 			   (unsigned long)pCallbackData,
! 			   STM_DMA_CB_CONTEXT_TASKLET);
! 	res=dma_compile_list(pDmaXfer->dwDmaCh, rx_transfer_paced, GFP_KERNEL);
  	if(res != 0)
  		goto err_exit;
  	// 6. Start the transfer
***************
*** 355,364 ****
  			      pDmaXfer->fMemWr ? DMA_FROM_DEVICE : DMA_TO_DEVICE);
  
  	// 5. Prepare the DMA channel structure
! 	dma_parms_comp_cb(&rx_transfer_sg, pCallback, pCallbackData, 0);
! 	dma_parms_addrs(&rx_transfer_sg, dwLanPhysAddr, 0, 0);
! 	dma_parms_sg(&rx_transfer_sg, (struct scatterlist*)pDmaXfer->pdwBuf, sg_count);
! 	res=dma_compile_list(&rx_transfer_sg);
  	if(res != 0)
  		goto err_exit;
  
--- 371,383 ----
  			      pDmaXfer->fMemWr ? DMA_FROM_DEVICE : DMA_TO_DEVICE);
  
  	// 5. Prepare the DMA channel structure
! 	dma_params_comp_cb(&rx_transfer_sg,
! 			   (void (*)(unsigned long))pCallback,
! 			   (unsigned long)pCallbackData,
! 			   STM_DMA_CB_CONTEXT_TASKLET);
! 	dma_params_addrs(&rx_transfer_sg, dwLanPhysAddr, 0, 0);
! 	dma_params_sg(&rx_transfer_sg, (struct scatterlist*)pDmaXfer->pdwBuf, sg_count);
! 	res=dma_compile_list(pDmaXfer->dwDmaCh, &rx_transfer_sg, GFP_KERNEL);
  	if(res != 0)
  		goto err_exit;
  
